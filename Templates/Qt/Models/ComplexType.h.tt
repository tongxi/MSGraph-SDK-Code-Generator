<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ include file="SharedQt.template.tt"#>
<#
var entity = host.CurrentType.AsOdcmClass();
#>
#pragma once
#include <QJsonObject>
#include <memory>

#include "ODCollection.h"

<#=writer.GetImportsClass(entity.Properties)#>

<#=writer.GetInterfaceLine(entity, "ODObject")#>

public:
  virtual ~<#=writer.GetPrefix() + entity.Name.ToUpperFirstChar()#>(){}
<#
foreach(var prop in entity.Properties)
{
  var wrapInPtr = (!prop.IsCollection() && !prop.IsString() && !prop.IsDate());
  var returnType = wrapInPtr ? "std::shared_ptr<" + prop.GetFullType() + ">" : prop.GetFullType();
  var setType = wrapInPtr && prop.IsComplex() ? "std::shared_ptr<" + prop.GetFullType() + ">" : prop.GetFullType();
  var varName = "m" + prop.GetToUpperFirstCharName();
#>

  const <#=returnType#>& get<#=prop.GetToUpperFirstCharName()#>() const
  {
     return <#=varName#>;
  }

  void set<#=prop.GetToUpperFirstCharName()#>(const <#=setType#>& value) 
  {
<#
    if (wrapInPtr && !prop.IsComplex())
    {
#>
    <#=varName#> = std::make_shared<<#=prop.GetFullType()#>>(value);
<#
    }
    else
    {
#>
     <#=varName#> = value;
<#
    }
#>
  }
<#
}
#>

  virtual void read(const QJsonObject& json);
  virtual void write(QJsonObject& json) const;

private:
<#
foreach(var prop in entity.Properties)
{
  var wrapInPtr = (!prop.IsCollection() && !prop.IsString() && !prop.IsDate());
  var type = wrapInPtr ? "std::shared_ptr<" + prop.GetFullType() + ">" : prop.GetFullType();
#>
  <#=type#> m<#=prop.GetToUpperFirstCharName()#>; 
<#
}
#>

};