<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ include file="SharedQt.template.tt"#>
<#
var entity = host.CurrentType.AsOdcmClass();
var entityName = writer.GetPrefix() + entity.Name.ToUpperFirstChar();
var entityRequestName = writer.GetPrefix() + entity.Name.ToUpperFirstChar() + "Request";
#>
#pragma once

#include "<#=writer.GetPrefix()#>Models.h"
#include "ODRequestBuilder.h"
#include "ODODataEntities.h"
#include "<#=entityRequestName#>.h"
<#foreach(var prop in entity.NavigationProperties())
{
    if(prop.IsCollection)
    {
#>
#include  "<#=TypeCollectionRequestBuilder(writer, prop)#>.h"
<#  }
}
#>

<#foreach(var complexType in entity.GetProperties(longDescriptionMatches:"navigable").Where(prop => prop.Type is OdcmClass))
{
#>
#include "<#=TypeCollectionRequestBuilder(writer, complexType)#>.h"
<#
}
#>

<#foreach(var func in entity.Methods)
{
    var methodName = func.Name.Substring(func.Name.IndexOf('.') + 1).ToLowerFirstChar();
    var requestBuilderName = writer.GetPrefix() + entity.Name.ToUpperFirstChar() + methodName.ToUpperFirstChar() + "RequestBuilder";
#>
#include "<#=requestBuilderName#>.h"
<#
}
#>
class <#=entityName#>RequestBuilder : public ODRequestBuilder
{
public:
    <#=entityName#>RequestBuilder(const QUrl& url, std::shared_ptr<ODHttpProvider> httpProvider, std::shared_ptr<ODAuthProvider> authProvider)
        :ODRequestBuilder(url, httpProvider, authProvider)
    {
    }

<#
foreach(var prop in entity.NavigationProperties())
{
    if(prop.IsCollection)
    {
        var propInstanceName = prop.Name.ToLowerFirstChar();
        var propTypeName = writer.GetPrefix() + prop.Type.Name.ToUpperFirstChar();
        var innerPropTypeName = writer.GetPrefix() + prop.Type.Name.ToUpperFirstChar();
        var innerPropInstanceName = prop.Type.Name.ToLowerFirstChar();
        var innerPropTypeRequestName = innerPropTypeName + "RequestBuilder";

#>
    <#=TypeCollectionRequestBuilder(writer, prop)#> <#=propInstanceName#>();

<#
        if (prop.LongDescriptionContains("queryable"))
        { 
#>
    <#=innerPropTypeRequestName#> <#=propInstanceName#>(const QString& <#=innerPropInstanceName#>);

<#
        }

    }
}
foreach(var complexType in entity.GetProperties(longDescriptionMatches:"navigable").Where(prop => prop.Type is OdcmClass))
{
#>
    <#=writer.GetPrefix() + complexType.Type.Name.ToUpperFirstChar()#>RequestBuilder <#=complexType.Name#>();

<#
}

#>
    <#=entityRequestName#> request();

    <#=entityRequestName#> requestWithOptions(const QList<std::shared_ptr<ODOption>>& options);

<#
foreach(var prop in entity.GetProperties(typeName:"Stream"))
{
    var propName = prop.Name.ToUpperFirstChar();
    var propRequestName = writer.GetPrefix() + propName + "Request";
#>
  //TODO: Stream support
  //  <#=propRequestName#> <#=propName.ToLowerFirstChar()#>RequestWithOptions(const QList<std::shared_ptr<ODOption>>& options);

  //  <#=propRequestName#> <#=propName.ToLowerFirstChar()#>Request();

<#
}
foreach(var func in entity.Methods)
{
    var methodName = func.Name.Substring(func.Name.IndexOf('.') + 1).ToLowerFirstChar();
    var requestBuilderName = writer.GetPrefix() + entity.Name.ToUpperFirstChar() + methodName.ToUpperFirstChar() + "RequestBuilder";
    methodName += "(";
    if (func.Parameters.Count > 0)
    {
        methodName += writer.GetParamsString(func.Parameters);
    }
    methodName+= ")";
#>
    <#=requestBuilderName#> <#=methodName#>;

<#

}
#>
<#
    foreach(var child in currentType.AsOdcmClass().Derived)
    {
        var childName = child.Name.ToCheckedCase();
#>
    <#=TypeRequestBuilder(writer, child)#> <#=childName.ToLowerFirstChar()#>();
<#
    }
#>
};
